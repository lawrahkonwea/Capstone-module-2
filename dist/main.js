"use strict";(self.webpackChunkwebpack_set_up=self.webpackChunkwebpack_set_up||[]).push([[179],{426:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),a=e.n(t),o=e(645),i=e.n(o)()(a());i.push([n.id,"\r\nbody {\r\n  font-family: 'Lato', 'roboto', sans-serif;\r\n\r\n  /* background-image: url('http://127.0.0.1:5500/dist/b190d3df533764e4f333.jpg'); */\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: 50% 50%;\r\n  image-rendering: -webkit-optimize-contrast;\r\n  color: #000;\r\n  margin: 0;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 18px 20%;\r\n  background-color: #66a5fd;\r\n  color: #f9faf8;\r\n}\r\n\r\n.logo {\r\n  font-size: 32px;\r\n  font-weight: 900;\r\n  font-style: italic;\r\n  color: #f9faf8;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: #fff;\r\n}\r\n\r\nul {\r\n  display: flex;\r\n  margin: 0;\r\n  padding: 0;\r\n  gap: 16px;\r\n  list-style-type: none;\r\n}\r\n\r\n.grid-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  padding: 10px;\r\n  gap: 40px;\r\n  margin: 0 9%;\r\n}\r\n\r\n.grid-item {\r\n  width: auto;\r\n  background-color: #fff;\r\n  border: 1px solid rgba(0, 0, 0, 0.8);\r\n  border-radius: 5px;\r\n  font-size: 30px;\r\n  text-align: center;\r\n  box-shadow: 2px 2px 17px 0;\r\n}\r\n\r\nimg {\r\n  width: 100%;\r\n  height: 240px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.card-title {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0 4%;\r\n}\r\n\r\nh2,\r\n.likes {\r\n  font-size: 13px;\r\n}\r\n\r\n.material-symbols-outlined {\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  cursor: pointer;\r\n}\r\n\r\n.likes {\r\n  text-align: start;\r\n  padding: 0 4%;\r\n}\r\n\r\np {\r\n  margin: 0;\r\n}\r\n\r\nbutton {\r\n  width: 90%;\r\n  margin: 10px 9px;\r\n  background-color: #ec5242;\r\n  color: #f0f2f5;\r\n  border: 0;\r\n  padding: 2%;\r\n  border-radius: 5px;\r\n}\r\n\r\nfooter {\r\n  width: 100%;\r\n  text-align: center;\r\n  background-color: #66a5fd;\r\n  color: #fff;\r\n  padding: 22px 0;\r\n  vertical-align: middle;\r\n}\r\n\r\n.github-link:hover {\r\n  color: rgb(194, 73, 3);\r\n  transition: 0.9s ease;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:";AACA;EACE,yCAAyC;;EAEzC,kFAAkF;EAClF,4BAA4B;EAC5B,sBAAsB;EACtB,4BAA4B;EAC5B,0CAA0C;EAC1C,WAAW;EACX,SAAS;AACX;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,iBAAiB;EACjB,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,qBAAqB;EACrB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,SAAS;EACT,UAAU;EACV,SAAS;EACT,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;EACf,aAAa;EACb,SAAS;EACT,YAAY;AACd;;AAEA;EACE,WAAW;EACX,sBAAsB;EACtB,oCAAoC;EACpC,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,0BAA0B;AAC5B;;AAEA;EACE,WAAW;EACX,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,aAAa;AACf;;AAEA;;EAEE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,UAAU;EACV,gBAAgB;EAChB,yBAAyB;EACzB,cAAc;EACd,SAAS;EACT,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,yBAAyB;EACzB,WAAW;EACX,eAAe;EACf,sBAAsB;AACxB;;AAEA;EACE,sBAAsB;EACtB,qBAAqB;AACvB",sourcesContent:["\r\nbody {\r\n  font-family: 'Lato', 'roboto', sans-serif;\r\n\r\n  /* background-image: url('http://127.0.0.1:5500/dist/b190d3df533764e4f333.jpg'); */\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: 50% 50%;\r\n  image-rendering: -webkit-optimize-contrast;\r\n  color: #000;\r\n  margin: 0;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 18px 20%;\r\n  background-color: #66a5fd;\r\n  color: #f9faf8;\r\n}\r\n\r\n.logo {\r\n  font-size: 32px;\r\n  font-weight: 900;\r\n  font-style: italic;\r\n  color: #f9faf8;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: #fff;\r\n}\r\n\r\nul {\r\n  display: flex;\r\n  margin: 0;\r\n  padding: 0;\r\n  gap: 16px;\r\n  list-style-type: none;\r\n}\r\n\r\n.grid-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  padding: 10px;\r\n  gap: 40px;\r\n  margin: 0 9%;\r\n}\r\n\r\n.grid-item {\r\n  width: auto;\r\n  background-color: #fff;\r\n  border: 1px solid rgba(0, 0, 0, 0.8);\r\n  border-radius: 5px;\r\n  font-size: 30px;\r\n  text-align: center;\r\n  box-shadow: 2px 2px 17px 0;\r\n}\r\n\r\nimg {\r\n  width: 100%;\r\n  height: 240px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.card-title {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0 4%;\r\n}\r\n\r\nh2,\r\n.likes {\r\n  font-size: 13px;\r\n}\r\n\r\n.material-symbols-outlined {\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  cursor: pointer;\r\n}\r\n\r\n.likes {\r\n  text-align: start;\r\n  padding: 0 4%;\r\n}\r\n\r\np {\r\n  margin: 0;\r\n}\r\n\r\nbutton {\r\n  width: 90%;\r\n  margin: 10px 9px;\r\n  background-color: #ec5242;\r\n  color: #f0f2f5;\r\n  border: 0;\r\n  padding: 2%;\r\n  border-radius: 5px;\r\n}\r\n\r\nfooter {\r\n  width: 100%;\r\n  text-align: center;\r\n  background-color: #66a5fd;\r\n  color: #fff;\r\n  padding: 22px 0;\r\n  vertical-align: middle;\r\n}\r\n\r\n.github-link:hover {\r\n  color: rgb(194, 73, 3);\r\n  transition: 0.9s ease;\r\n}\r\n"],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(i[s]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);t&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),r.push(d))}},r}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */"),i=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[r].concat(i).concat([o]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var o={},i=[],A=0;A<n.length;A++){var s=n[A],c=t.base?s[0]+t.base:s[0],d=o[c]||0,l="".concat(c," ").concat(d);o[c]=d+1;var p=e(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)r[p].references++,r[p].updater(u);else{var f=a(u,t);t.byIndex=A,r.splice(A,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function a(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,a){var o=t(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var A=e(o[i]);r[A].references--}for(var s=t(n,a),c=0;c<o.length;c++){var d=e(o[c]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}o=s}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,a&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}},680:(n,r,e)=>{var t=e(379),a=e.n(t),o=e(795),i=e.n(o),A=e(569),s=e.n(A),c=e(565),d=e.n(c),l=e(216),p=e.n(l),u=e(589),f=e.n(u),g=e(426),E={};E.styleTagTransform=f(),E.setAttributes=d(),E.insert=s().bind(null,"head"),E.domAPI=i(),E.insertStyleElement=p(),a()(g.Z,E),g.Z&&g.Z.locals&&g.Z.locals;const m=document.querySelector(".grid-container"),C=(document.getElementsByClassName("material-symbols-outlined"),async()=>{const n=[];return(await(async n=>{const r=await fetch("https://www.themealdb.com/api/json/v1/1/search.php?f=b");return(await r.json()).meals.slice(0,15)})()).forEach((r=>{const e={id:r.idMeal,name:r.strMeal,image:r.strMealThumb,category:r.strCategory,area:r.strArea,instructions:r.strInstructions};n.push(e)})),n}),B="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/iHlfVWj35yMMl9mYGaLB/likes",b=async n=>{const r=n.getAttribute("data-id"),e=(await(async()=>{const n=await fetch(B);return await n.json()})()).filter((n=>n.item_id===r));e.length>0&&(n.textContent=`${e[0].likes} Likes`)};document.addEventListener("DOMContentLoaded",(async()=>{await(async()=>{const n=await C();m.innerHTML="",n.forEach((n=>{const r=`\n        <div class="grid-item">\n      <div><img src="${n.image}" alt="${n.name}"></div>\n      <div class="card-title">\n        <h2>${n.name}</h2>\n        <span class="material-symbols-outlined card-likes" data-id="${n.id}">\n          favorite\n        </span>\n      </div>\n      <div class="likes">\n        <p data-id="${n.id}" class="like-counter"></p>\n        <button data-id="${n.id}" onclick="openPopupWindow('${n.id}')">Comment</button>\n      </div>\n      </div>\n        `;m.innerHTML+=r}))})(),document.querySelectorAll(".like-counter").forEach((async n=>{await b(n)}));((n,r)=>{0!==r.length?n.innerHTML=`MEALS(${r.length})`:n.innerHTML="Declined, no added meal"})(document.querySelector(".meal-counter"),document.querySelectorAll(".grid-item"))})),window.addEventListener("click",(async n=>{const r=n.target;if(r.classList.contains("card-likes")){const n=r.getAttribute("data-id");await(async n=>{await fetch(B,{method:"POST",headers:{"Content-type":"application/json"},body:JSON.stringify({item_id:`${n}`})})})(n);const e=r.parentElement.nextElementSibling.firstElementChild;await b(e)}}))}},n=>{n(n.s=680)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
